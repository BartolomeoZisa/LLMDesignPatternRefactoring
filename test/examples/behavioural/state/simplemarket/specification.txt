Start = free

Free -> assign = occupied
Free -> report_issue = free maintanance

occupied -> end_market = free
Assigned -> report_issue = occupied maintanance

occupied maintanance -> end_maintenance = occupied
occupied maintenance -> end_market = free maintanance

free maintanance -> end_maintenance = free 

If wrong stay in the same state 

Simplified from 

A stall can be in one of the following states:
- Free: From the end of the market until the next assignment.
- Assigned
- Occupied: During the market.
- Under Maintenance

Maintenance is triggered by a problem report made by merchants or organizers. 

Each report is classified with a level of urgency, determined by the state of the house:
- High: If occupied.
- Medium: If assigned.
- Low: If free.

Once the report is received, the system assigns a technician based on the type of intervention required and the urgency level. 

After the work is completed, the house returns to its previous state, unless events such as:
- Assignment
- The start of the market
- The end of the market
require an automatic change in its state.

If the technician reports the problem as unsolvable, the house remains in the maintenance state, and the system notifies the organizers to decide on any extraordinary interventions.


#should rename to avoid hints
Refactoring with state pattern Stall Class