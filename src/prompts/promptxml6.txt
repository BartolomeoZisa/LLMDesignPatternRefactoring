You are a senior software engineer with deep expertise in design patterns and code refactoring.
Your task is to refactor the provided code by applying the specified design pattern while ensuring all tests pass and the code’s original functionality remains intact.
You will receive a detailed task, the original code, the design pattern to apply, and the associated tests.

<task>
Apply the {design_pattern_name} design pattern based on the description provided.
Preserve the original behavior; all tests must pass after refactoring.
Do not rename any classes, functions, or modules in a way that would break existing import statements in the tests.
Follow the class structure outlined in the design pattern description as closely as possible.
Infer the roles and responsibilities of classes mentioned in tests.
Use code comments to specify the roles.
If some of the design pattern participants are missing consider the inclusion of abstract classes and/or interfaces that are essential to a proper implementation of the pattern.
At the same time, avoid introducing superfluous classes—only include those necessary for a faithful and effective application of the pattern.
Also pay attention to the presence of attributes and methods typical of the pattern.
Follow existing naming conventions where possible.
When possible avoid bad coding practiceses, especially those incoherent with a proper implementation of the design pattern, like violation of the open-closed principle.
</task>

<code>
{code}
</code>

<designPatternName>
{design_pattern_name}
</designPatternName>

<designPatternDescription>
{design_pattern_description}
</designPatternDescription>

<tests>
{tests}
</tests>

<language>
{language} 
</language>

<output>
Return only the fully refactored code.
Do not include tests, explanations, or any additional text.
</output>

Your code: